#!/usr/bin/python2
# -*- coding: utf-8 -*-
#
# Copyright 2016 Peerchemist
#
# This file is part of Peerbox project.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
 
__author__ = "Peerchemist"
__license__ = "GPL"
__version__ = "0.5.6.2"

import os, sys
import signal
import sh
import subprocess
import argparse
import json
import urllib
import platform
import collections
import getpass
from peerbox import ppc_node
from peerbox import health_check
from datetime import timedelta
from datetime import datetime as dt


def system():
    '''parses system info'''

    def uptime():
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
            uptime_str = str(timedelta(seconds = uptime_seconds))

        return uptime_str

    def distr():
        return platform.linux_distribution()[0] + " " + platform.linux_distribution()[1]

    def temp():
        with open('/sys/class/thermal/thermal_zone0/temp', 'r') as temp:
            return(float(temp.readline().strip())/1000)

    mm = {
        'os': distr(),
        'uptime': uptime(),
        'avg_load': os.getloadavg()#,
        #'system_temperature': temp()
        }

    return mm

def hardware():
    '''parses hardware info'''

    info = {}

    def platform():
        with open('/proc/cpuinfo') as cpuinfo:
            for line in cpuinfo:
                if line.startswith('Hardware'):
                    hardware = line.split(':')[1].strip()
                    if hardware == "BCM2708":
                        return "Raspberry Pi_1"
                    if hardware == "BCM2709":
                        return "Raspberry Pi_2"

    def serial():  
        with open('/proc/cpuinfo') as cpuinfo:
            for line in cpuinfo:            
                if line.startswith('Serial'):
                    ser = line.split(':')[1].strip()
                    return ser

    if platform() != None:

        with open('/proc/cmdline', 'r') as cmdline:
            for i in cmdline.readline().split():
                if i.startswith('smsc95xx.macaddr'):
                    info['macc'] = str(i.split('=')[1])

        info["hardware"] = platform()
        info["serial"] = serial()
        return info

    else:
        return {"hardware": "Unknown",
                "serial": "Unknown",
                "macc": "Unknown"}

def isRunning():
    '''checks if ppcoind is running'''
    try:
        pid = sh.pidof("ppcoind").stdout.strip()
    except:
        return False

    if pid != None:
        return True

def exchangeRates():
    '''pull peercoin exchange rates from remote api'''

    def get():
        api = "https://www.cryptonator.com/api/ticker/"

        return {"usd": json.loads(urllib.urlopen(api + "ppc-usd").read())["ticker"]["price"], 
                "btc": json.loads(urllib.urlopen(api + "ppc-btc").read())["ticker"]["price"]
                }

    def handler(s, f):
        print 'Signal handler called with signal', s
        raise IOError("Couldn't connect!")

    # Set the signal handler and add 5-second alarm
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(5)

    return get()

    signal.alarm(0) # Disable the alarm

def info(public=False):
    '''acts like just like ppcoind getinfo but on steroids'''

    info = node.getinfo()
    report = collections.OrderedDict()

    report["ppc_version"] = info["version"]
    report["os"] = system()["os"]
    report["hardware"] = hardware()["hardware"]
    if (public == False and "Raspberry Pi" in hardware()["hardware"]):
      report["serial"] = hardware()["serial"]
      report["macc addr"] = hardware()["macc"]
    report["uptime"] = system()["uptime"]
    report["average_load"] = system()["avg_load"]
    
    if public == False:
        report["balance"] = info["balance"]
        if (int(report["balance"]) != 0 
            and exchangeRates() != None
            and info["testnet"] == False):
          report["value"] = {"BTC": int(float(report["balance"]) * float(exchangeRates()["btc"])),
                              "USD": int(float(report["balance"]) * float(exchangeRates()["usd"]))}
        report["stake"] = info["stake"]
        report["newmint"] = info["newmint"]
    
    if public == False:
      report["ip"] = info["ip"]
    report["connections"] = info["connections"]
    report["blocks"] = info["blocks"]
    report["moneysupply"] = info["moneysupply"]
    report["pos_difficulty"] = node.getdifficulty()["proof-of-stake"]
    report["pow_difficulty"] = node.getdifficulty()["proof-of-work"]
    
    if info["testnet"] == True:
        report["testnet"] = True

    report["protocolversion"] = info["protocolversion"]
    report["walletversion"] = info["walletversion"]

    return report

def gauth_set():
    #gauth = sh.Command("/usr/bin/google-authenticator")
    #gauth("--force", "-t", "-d", "--rate-limit=3", "--rate-time=120", 
    #                           "--window-size=4", "--label=Peerbox")
    subprocess.call(["/usr/bin/google-authenticator", 
                    "--force", "-t", "-d", "--rate-limit=3", 
                    "--rate-time=120", "--window-size=4", "--label=Peerbox"])
    sh.sudo("/usr/lib/pcf/set_gauth", "set")
    print("Google-authenticator is now enabled.")

def gauth_unset():
    sh.sudo("/usr/lib/pcf/set_gauth", "unset")
    print("Google-authenticator is now disabled.")

def healthCheck():
    '''compares local blockchain data with ppc.blockr.io as reference point'''
    health = health_check.Health(node)
    report = health.check()
    print
    print "Checking if we are on the right chain..."
    print "Using" + " " + "ppc.blockr.io" + " as reference."
    print

    for k,v in report.items():
        if v == True:
            print(k + ":" + " True")
        else:
            print(k + ":" + " False")

def mint():
    passwd = raw_input("Please enter your wallet password: ")
    print("Unlocking wallet for minting only.")
    try:
        node.walletpassphrase(passwd)
    except:
        return

def balance():
    '''prints out wallet balance'''
    return { 'balance': node.getbalance() }

def addr():
    '''prints out all Peercoin addresses associated with this wallet.'''
    return node.listreceivedbyaddress()

def send(addr, amount, comment=""):
    '''send Peercoin to some address'''
    return node.sendtoaddress(str(addr), int(amount), str(comment))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Show information on Peerbox.')
    parser.add_argument("-version", help="print Peerbox version.", action="store_true")
    parser.add_argument("-info", help='''equal to "ppcoind getinfo" with some extras''', action="store_true")
    parser.add_argument("-balance", help="print balance", action="store_true")
    parser.add_argument("-public", help="show info with omitted private data", action="store_true")
    parser.add_argument("-stdout", help="dump data to stdout, use to pipe to some other program", action="store_true")
    parser.add_argument('-health', help="compare local blockchain data with ppc.blockr.io as reference", action="store_true")
    parser.add_argument("-rates", help="current average PPC exchange rates in USD and BTC", action="store_true")
    parser.add_argument("-start", help="start Peerbox", action="store_true")
    parser.add_argument("-stop", help="stop Peerbox", action="store_true")
    parser.add_argument("-autostart", help="make Peerbox autostart at boot time", nargs='?', action='append')
    parser.add_argument("-tor", help="start Peerbox with Tor", action="store_true")
    parser.add_argument("-onion", help="show .onion address if node has one", action="store_true")
    parser.add_argument("-restart", help="restart Peerbox", action="store_true")
    parser.add_argument("-mint", help="unlock Peercoin wallet for minting.", action="store_true")
    parser.add_argument("-addr", help="shows all associated addresses.", action="store_true")
    parser.add_argument("-send", help="send Peercoins; -send ADDRESS AMOUNT", nargs="*")
    parser.add_argument("-gauth", help="enable or disable google-authenticator, use with 'set' or 'unset'", nargs='?', action='append')
    args = parser.parse_args()

if isRunning() == False and not (args.start or args.tor):
    print('''Peerbox is not running. Please start Peerbox with "peerbox -start" ''')
    sys.exit()

if isRunning() == False and args.start:
    print("Starting Peerbox...")
    sh.sudo("systemctl", "start", "ppcoind@{0}.service".format(getpass.getuser()))

if isRunning() == False and args.tor:
    print("Starting Peerbox with Tor onion router as proxy...")
    sh.sudo("systemctl", "start", "ppcoind-tor@{0}.service".format(getpass.getuser()))

if isRunning() == True and args.start:
    print("Peerbox is already running.")

if isRunning() == True and args.tor:
    print("Starting Peerbox with Tor onion router as proxy...")
    sh.sudo("systemctl", "start", "ppcoind-tor@{0}.service".format(getpass.getuser()))

if args.version:
    print(__version__)
    
if args.restart:
    print("Restarting Peerbox...")
    try:
        if sh.systemctl("is-active", "ppcoind@{0}.service".format(getpass.getuser())) != "active":
            sh.sudo("systemctl", "restart", "ppcoind@{0}.service".format(getpass.getuser()))
    except:
        pass
    try:    
        if sh.systemctl("is-active", "ppcoind-tor@{0}.service".format(getpass.getuser())) != "active":
            sh.sudo("systemctl", "restart", "ppcoind-tor@{0}.service".format(getpass.getuser()))
    except:
        pass

if args.stop:
    print("Stopping Peerbox...")
    try:
        if sh.systemctl("is-active", "ppcoind@{0}.service".format(getpass.getuser())) != "active":
            sh.sudo("systemctl", "stop", "ppcoind@{0}.service".format(getpass.getuser()))
    except:
        pass
    try:
        if sh.systemctl("is-active", "ppcoind-tor@{0}.service".format(getpass.getuser())) != "active":
            sh.sudo("systemctl", "stop", "ppcoind-tor@{0}.service".format(getpass.getuser()))
    except:
        pass

if args.autostart:
    if args.autostart[0].lower() == "tor":
        sh.sudo("systemctl", "enable", "ppcoind-tor@{0}.service".format(getpass.getuser()))
        print("Peerbox Tor will now autostart at boot time.")
    else:
        sh.sudo("systemctl", "enable", "ppcoind@{0}.service".format(getpass.getuser()))
        print("Peerbox will now autostart at boot time.")

### rpc dependant functions from here ##

node = ppc_node.Node()

if args.info:
    print(json.dumps(info(), indent=4))

if args.public:
    print(json.dumps(info(public=True), indent=4))

if args.stdout:
    sys.stdout.write(info())

if args.health:
    healthCheck()

if args.rates:
    try:
        print(json.dumps(exchangeRates(), indent=4))
    except:
        print("Sorry, remote API could not be reached. Try again later.")
        pass

if args.mint:
    mint()

if args.balance:
    print(json.dumps(balance(), indent=4))

if args.addr:
    print(json.dumps(addr(), indent=4))

if args.send:
    print(send(args.send[0], args.send[1]))

if args.onion:
    try:
        print(sh.sudo("cat", "/var/lib/tor/ppcoin-service/hostname"))
    except:
        pass

if args.gauth:
    if not args.gauth[0]:
        print("You must state the argument, 'set'/'true' or 'unset'/'false'.")
    if args.gauth[0] == ("set" or "true"):
        gauth_set()
    if args.gauth[0] == ("unset" or "false"):
        gauth_unset()
    if args.gauth[0] not in ("set", "unset", "true", "false", "status"):
        print("I really don't know what do you want me to do.")

if not any(vars(args).values()) == True:
    print(json.dumps(info(), indent=4))
